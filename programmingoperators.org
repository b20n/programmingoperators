#+HTML_DOCTYPE: html5
#+HTML_HEAD:
#+OPTIONS: html-style:nil html-scripts:nil html-postamble:nil
#+OPTIONS: author:nil date:nil timestamp:nil
* Refile
* Outline
** Introduction
- What is this book about?
- Who is this book for?
- Why read this book?
- How this book is organized
- Notes, etc., on programming languages
** What is an Operator?
Why? Why Not?
** Operator Frameworks
Kubebuilder
Operator SDK
client-go
** Convergence and Level-Triggering
** Interacting with the Kubernetes API
** Case Study: ??
** Solving Problems with Operators
- This chapter needs to be meaty, but the preceding one shouldn't be
  too simplistic - otherwise it'll hit like a truck...
- Examples here should be cluster-internal, or mostly so
- Probably want somewhere between 5-10 examples

- Backing up a database
- Cluster autoscaler
- Scaling a database cluster with orchestration

This might be the most important chapter.
** Working with External Systems
** Operator API Design
** Performance and Scalability
** Expanding the state of the world
** Case Study: Deployment Controller
** "Meta-operators"
** Advanced Topics
Generations
Admission Controllers
Finalizers
Owner References

** Testing?
* Chapters
** Introduction                                                     :CHAPTER:
:PROPERTIES:
:EXPORT_FILE_NAME: dist/01-introduction
:END:

The rapid growth of Kubernetes <<>>

The purpose of this book is not to discuss "consuming" operators as
part of deploying a software stack on Kubernetes. Operators as a
software delivery mechanism are secondary. Rather, this is about using
the operator pattern to build (and operate!) production-quality
systems.

The ideas underpinning operators are not specific to Kubernetes, but
Kubernetes is where this book's focus is. This is largely a practical
matter: Kubernetes is popular, and has good support for operator-style
systems, and there aren't a lot of folks doing this kind of thing
elsewhere. Regardless, I hope that readeres gain an intuition for
building convergence-based distributed systems that is useful in other
domains. At some point in the future the cool kids won't know what
Kubernetes is, but they'll still need to write correct distributed
systems.

Regarding nomenclature: I'll use the term "operator" (with a
lower-case "o") and "operator pattern" in this book to refer to the
sorts of convergence-based systems discussed throughout. You'll get
the idea. "Operator" is a strange term. Kubernetes generally doesn't
use it: it has a `controller-manager`, not `operator-manager`. But the
word is a useful shorthand. I explicitly don't intend the terms to
refer to RedHat's Operator Framework or Operator Maturity Model,
except where otherwise noted.

Regarding code: this is a book about programming. You should expect to
read code while reading the book, specifically Go code. Go is the
lanugage best supported by the Kubernetes API, which makes it far
easier to build working operators without yak shaving on frameworks.
It's certainly possible to write operators in Python, C, or Bash, but
it's just more work. If you aren't familiar with Go, don't worry -
there's not a whole lot to it, and I don't use any esoteric features
of the language. If you're familiar with any other imperative
language, you'll probably do fine.

Finally, all code in this book should be functional and mostly
idiomatic as of Kubernetes 1.16. Kubernetes moves quickly, and the CRD
interfaces are still evolving as of this writing, but the community
takes backwards-compatibility seriously, so I expect that the gist of
the projects here will continue to function for quite some time.

** What is an Operator?
Managing the deployment and lifecycle of complex, stateful,
distributed applications is hard work. It's spawned multiple fields -
database administration and site reliability engineering, to name two
- and motivates deeply held architectural opinions. Microservices and
functions-as-a-service wouldn't be what they are today if managing
state was easy.

Kubernetes and similar tools have raised the level of abstraction for
many developers and operators. Programmers today regularly treat
entire datacenters effectively as a single computer. Servers as
"cattle, not pets" is a maxim worn threabare by 2020, but even as
recently as 2005 this would have been an incomprehensible and
unrealizable idea. The future is here... But it is not evenly
distributed. These new, powerful abstractions have been by and large
focused on solving the simpler problems of stateless compute. Stateful
services - databases, caches, message queues, etc. - have been left
behind with their pets. It's not impossible to deploy stateful systes
on Kubernetes - `StatefulSet`, `PersistentVolume`, and other
abstractions are useful building blocks. To properly manage them,
however, to reconfigure, upgrade, scale, or recover from failure,
these systems generally require domain knowledge that simply cannot be
encoded in Kubernetes.

An "operator" is software that implements these higher-level
application-specific behaviors to enable automated management of
complex stateful systems. Operators in Kubernetes utilize the
`CustomResourceDefinition` resource to extend the Kubernetes API in to
the domain of a specific application.

A minimal operator comprises two components: a
`CustomResourceDefinition` (`CRD`) and a controller that acts on
instances of that `CRD`. An instance of a `CRD` is a Kubernetes
resource more or less like any other: it includes standard
`ObjectMeta` fields such as `Name`, `CreationTimestamp`,
`ResourceVersion`, and `Generation` as well as, typically, `Spec` and
`Status` fields whose definitions are up to the implementor.

<< example crd >>

A controller is a procedure that takes an instance of the `CRD` and
optionall performs some action. It might create other resources, make
an API call, reconfigure a database, or launch missiles. Beyond some
very basic limitations, Kubernetes doesn't care.

<< example controller >>

That's it, really. "Operator" may imply big ideas about autonomous,
self-healing distributed systems and thousands of SREs on the streets
looking for jobs, but it doesn't entail them. An operator can be as
big or as small as the role it needs to fill with a system.

Most of the rest of this book is about how to turn this trivial
example in to something worthwhile and useful. There's a lot to cover.
To dip in just a bit deeper let's discuss two big ideas as a slight
enhancement of this simplistic operator.

The first is related to the fact that Operators exist at the behest of
the Kubernetes API, and that API has very particular semantics. One of
these semantics, and perhaps the most important for operator
programmers, is that there is no way to observe every change to a
resource. << EXAMPLE HERE >>. Whatever your operator needs to do, it
neds to do based on the current state of the resource at any given
time. This idea is sometimes called "level-triggering", and it's
essential to writing operators that do what they say on the box. We'll
be talking about it quite a bit.

The second big idea is convergence. Given a resource with a certain
specification, the controller should eventually converge to a stable
state where no more action is taken. "Eventually" could be a very long
time - hundreds of iterations, or hours in the real-world - but the
controller should be working to align the state of the world with the
state specified in the resources it manages. If that specified state
changes - even before the world has been converged - the controller
should start moving towards the new state.

<< tie back to distributed systems >>

** Operator Frameworks
** Convergence and Level-Triggering
While this book is largely focused on operators as a pattern for
building systems on Kubernetes, it's worth keeping in mind that the
basic ideas here don't have much to do with Kubernetes at all. In this
chapter we'll take a step back from the pragmatic and get a little
more grounding in the theory behind the practice. We'll swing back
around to the "real thing" soon enough, newly armed with a deeper
understand of the fundamentals. The key concepts are *declarativity*,
*convergence*, and *level-triggering*. Maybe these are already
familiar to you, or perhaps you have more of a practical bias; if
that's the case, don't hesitate to skip forward. This chapter stands
alone, and you can always come back to it.

# Something to note here: we're not _really_ getting away from
# Kubernetes here; the three concepts are all motivated by the
# semantics of the Kubernetes API. Maybe this needs to be after the
# "Interacting with the Kubernetes API" chapter?

*** INPROGRESS Declarativity: what, not how
# I'm not super happy with how this is fitting together. Maybe talk
# about the interface concern second? Or say, "declarativity is a big
# concept, but we're mostly going to talk about interfaces"?

If you've been around programming circles for a while, there's a good
chance you're already familiar with the the idea of "declarativity",
and declarative vs. imperative. Declarative is about "what", and
imperative is about "how", right? It's the difference between the
elegance of mergesort in Haskell and the mechanical grind (and the
beauty!) of Timsort in C. In the world of operators, declarativity is
of supreme importance

*** TODO Convergence

*** TODO Level-triggering


** Interacting with the Kubernetes API
** Case Study: ??
** Solving Problems with Operators
We've now covered all of the basics; it's time to dive in to some more
realistic problems and discuss how to solve them with operators. This
chapter will go in-depth with several real world problems and sketch
out solutions.

** Working with External Systems
One of the challenges of managing complex stateful systems is that
they tend to be hard to "contain": their correct behavior depends on a
range of technologies such as:

- distributed consensus stores (etcd, chubby)
- block storage volumes
- object storage buckets

These systems probably aren't running on top of Kubernetes and they're
unlikely to be managed by the same operator as the system in question.
To build a proper Kubernetes-native management tool for systems with
these sorts of dependencies, the operator will need to interact with
systems outside of its direct purview.

The basic "stateful" primitives native to Kubernetes are a useful
first step. The ~PersistentVolume~/~PersistentVolumeClaim~/~CSI~
interfaces are more or less exactly what we're talking about: an
bridge between the Kubernetes world and and the external world. It
turns out that the Kubernetes authors have written the controllers
themselves, so working with these abstractions is somewhat abstracted
from what one might call and operator. But under the hood, it's a
similar idea - a Kubernetes-native, resource-based interface to the
lifecycle of an external stateful service.

But what about other resources? What if we have to write the system
ourselves, controller and all? Let's take as a concrete example an
object storage bucket such as Amazon S3 or IBM's Cloud Object Storage.

# Example where CRUD is embedded directly in the controller

# Example with a custom resource and controller
** Operator API Design
** Performance and Scalability
** Expanding the state of the world
** Case Study: Deployment Controller
** "Meta-operators"
** Advanced Topics
** Testing?
* Ideas
* Meta
** Export code
#+BEGIN_SRC elisp
(defun org-export-programming-operators ()
  (interactive)
  (save-buffer)
      (org-map-entries
       (lambda ()
         (org-html-export-to-html nil t t))
       "CHAPTER"))
#+END_SRC
